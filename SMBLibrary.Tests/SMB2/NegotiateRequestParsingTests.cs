/* Copyright (C) 2024 Tal Aloni <tal.aloni.il@gmail.com>. All rights reserved.
 * 
 * You can redistribute this program and/or modify it under the terms of
 * the GNU Lesser Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 */
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SMBLibrary.SMB2;
using System;

namespace SMBLibrary.Tests.SMB2
{
    [TestClass]
    public class NegotiateRequestParsingTests
    {
        [TestMethod]
        public void ParseNegotiateRequestWithNegotiateContextList_WhenOffsetIsZero()
        {
            byte[] negotiateRequestCommandBytes = GetNegotiateRequestWithNegotiateContextListBytes();
            NegotiateRequest negotiateRequest = new NegotiateRequest(negotiateRequestCommandBytes, 0);
            Assert.AreEqual(5, negotiateRequest.Dialects.Count);
            Assert.AreEqual(4, negotiateRequest.NegotiateContextList.Count);
            Assert.AreEqual(NegotiateContextType.SMB2_PREAUTH_INTEGRITY_CAPABILITIES, negotiateRequest.NegotiateContextList[0].ContextType);
            Assert.AreEqual(NegotiateContextType.SMB2_ENCRYPTION_CAPABILITIES, negotiateRequest.NegotiateContextList[1].ContextType);
        }

        [TestMethod]
        public void ParseNegotiateRequestWithNegotiateContextList_WhenOffsetIsNonZero()
        {
            // Test non-zero offset
            byte[] negotiateRequestCommandBytes = GetNegotiateRequestWithNegotiateContextListBytes();
            byte[] buffer = new byte[negotiateRequestCommandBytes.Length + 2];
            Array.Copy(negotiateRequestCommandBytes, 0, buffer, 2, negotiateRequestCommandBytes.Length);

            NegotiateRequest negotiateRequest = new NegotiateRequest(buffer, 2);
            Assert.AreEqual(5, negotiateRequest.Dialects.Count);
            Assert.AreEqual(4, negotiateRequest.NegotiateContextList.Count);
            Assert.AreEqual(NegotiateContextType.SMB2_PREAUTH_INTEGRITY_CAPABILITIES, negotiateRequest.NegotiateContextList[0].ContextType);
            Assert.AreEqual(NegotiateContextType.SMB2_ENCRYPTION_CAPABILITIES, negotiateRequest.NegotiateContextList[1].ContextType);
        }

        [TestMethod]
        public void ParseRewrittenNegotiateRequestWithNegotiateContextList()
        {
            byte[] negotiateRequestCommandBytes = GetNegotiateRequestWithNegotiateContextListBytes();
            NegotiateRequest negotiateRequest = new NegotiateRequest(negotiateRequestCommandBytes, 0);
            negotiateRequestCommandBytes = negotiateRequest.GetBytes();
            negotiateRequest = new NegotiateRequest(negotiateRequestCommandBytes, 0);
            Assert.AreEqual(5, negotiateRequest.Dialects.Count);
            Assert.AreEqual(4, negotiateRequest.NegotiateContextList.Count);
            Assert.AreEqual(NegotiateContextType.SMB2_PREAUTH_INTEGRITY_CAPABILITIES, negotiateRequest.NegotiateContextList[0].ContextType);
            Assert.AreEqual(NegotiateContextType.SMB2_ENCRYPTION_CAPABILITIES, negotiateRequest.NegotiateContextList[1].ContextType);
        }

        private static byte[] GetNegotiateRequestWithNegotiateContextListBytes()
        {
            return new byte[]
            {
                0xfe,0x53,0x4d,0x42,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x24,0x00,0x05,0x00,0x01,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0xd2,0xb6,0x2a,0x44,
                0x99,0x4d,0xef,0x11,0xb8,0x9d,0x00,0x22,0x48,0x39,0x02,0x34,0x70,0x00,0x00,0x00,
                0x04,0x00,0x00,0x00,0x02,0x02,0x10,0x02,0x00,0x03,0x02,0x03,0x11,0x03,0x00,0x00,
                0x01,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x20,0x00,0x01,0x00,0x6c,0xec,
                0x6e,0x4d,0x8e,0x58,0x93,0xd9,0xb3,0x47,0x24,0x09,0x12,0x7a,0xc8,0x4f,0x9b,0xf6,
                0x1d,0xaa,0xbc,0xab,0x22,0xf5,0xec,0xf6,0x3d,0xb5,0x3e,0xc3,0x76,0x85,0x00,0x00,
                0x02,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x00,0x00,
                0x03,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
                0x04,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x05,0x00,0x34,0x00,0x00,0x00,0x00,0x00,
                0x6d,0x00,0x69,0x00,0x72,0x00,0x61,0x00,0x67,0x00,0x65,0x00,0x2d,0x00,0x73,0x00,
                0x65,0x00,0x72,0x00,0x76,0x00,0x65,0x00,0x72,0x00,0x34,0x00,0x2e,0x00,0x75,0x00,
                0x73,0x00,0x65,0x00,0x72,0x00,0x73,0x00,0x2e,0x00,0x6c,0x00,0x6f,0x00,0x63,0x00,
                0x61,0x00,0x6c,0x00
            };
        }
    }
}
